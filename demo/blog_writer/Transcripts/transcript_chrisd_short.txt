AF: I need a multi-agent system for this use case! how many LLM agents do I need for this use case? wait, do I need an agent for this use case? hmm, do I need an LLM for this use case? this is the typical thought process that happens to many of us as we think through details of use cases we want to do. at first we go to the coolest and most complex systems to solve the problem, and once we get deeper in it and understand all the nuances and constraints, then we'll start to realize that we need the simplest possible solution that _actually_ solves the core problem so that we have the most amount of control over the behavior of the system. this is particularly important when we think use cases in the context of business workflows. the level of robustness necessary for an AI system to realistically improve a business process is quite high! so is there a heuristic to shortcut to a decide about what kind of LLM architecture is necessary for a given use case and its corresponding business context?
CD: Okay, Hello everybody. I'm Chris and I've been doing agent development of some sort or another for almost a year and a half now certainly since March 2023 and had a lot of experience doing this just practical experience. I know we're in sort of a fast-moving space and there's a lot of the ground underneath us changing sort of from release to release, but I thought I'd talk a little bit about my experience building agent systems and how I ended up sort of moving away from a multi-agent approach after trying it very early on I'm gonna got some examples to sort of talk about that maybe a little bit more specifically
CD: So just to introduce myself talk a little bit about how I got into this. I built a local news analysis website like a data journalism website called torontoverse.com and a big part of that was that we had an interactive sort of map based infographic that went along with pretty much almost every article one of the things that blew me away when I first got beta access to gpt4 was that it was actually able to code our interactive components basically on day one. I only had to give it a couple of examples of what to do because a lot of the pieces were sort of mapbox and D3 stuff that clearly the model had already learned very, it was able to write that code just for me from my perspective shockingly well,
CD: and then around that time in March, I'd read about the react pattern and I think maybe a lot of people started to put two and two together and realized that I could just have gpt4 do a lot of the heavy lifting, I could easily get the journalists that I was working with to work with chat. I think to get articles together but actually loading them into the system and testing them and Publishing them took a lot of manual steps at the time. We're actually using a GitHub repository as our database for Content, which would then be synced into redis and served live off of redis, but, the react pattern was away for me to basically automate the act of taking this code and getting it up onto the site and I also used it for the whole CMS interface at the end because HTML for articles and all that sort of stuff was relatively difficult for the journalist to put together, so
CD: That Network shockingly and a lot of the experience this is gonna have here will derive from that experience. Unfortunately shortly after I did that bill C 18 hit and I don't know if you know me to really difficult to do sort of interesting or independent publishing in Canada, because believe it or not audiences tend to come from Facebook and they no longer publish Canadian news. So now I'm developing agents full-time at Tribble where we're building agents for sales enablement, which is a really cool use case, I think so what do I mean when I say multi-agent? I feel like this is maybe a lot of these terms are sort of loosely defined at this stage is a lot of fast moving Parts a lot of things changing and for me, I basically think of multi-agent where we have multiple instances of an agent Loop that have different behaviors that the user is interacting with or interacting with each other.
AF: I tend to think of multi-agent as these things operating at roughly the same level of abstraction that doesn't mean they all have the same capabilities but that and large we're talking about multicom multiple copies of the same style of process. We call them all agents. It means they have something in common, and I guess, you do want them in a multi-agent system to be interacting with each other in order to produce that output maybe a simple definition, but that's how I would describe a multi-agent system at this stage.
SP: And when I started developing Toronto versus my head, once I got one agent working. I was like, obviously we have to do is just get a bunch of these working together and it's like I have a whole team that I didn't have to hire which I think is sort of what a lot of people think when they see agents working. I noticed that a lot of digital human emphasis on the latest Nvidia presentation, and for me, there are other more practical things to look at other than it's like metaphorical attraction, there are some model limitations that you have to worry about or certainly that you worry about when you're building, one of the things is basically context window how much context can you give a single agent to do something and I think that makes you think okay how many tool definitions gonna give a single agent I managed to get over 20 tools with one agent and never had a problem with it being able to call the right one at the right time. Now, I haven't been doing that with open AI tools because I think their tool definitions are relatively for both being Jason schema in my original react pattern ones were much simpler and I was able to get much more of them into the model.
CD: but eventually there's a cost component to this. So you think okay if I can have different agents with smaller toolkits. I can do things a much more focused ways that ultimately will cost less.
